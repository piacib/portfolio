@use "sass:math";
@import "./style.module.scss";
@import "../HexagonSvg/style.module.scss";
body {
  animation: overflowHide $totalAnimationTime linear forwards;
  //   background: #373940;
}
@keyframes overflowHide {
  from {
    overflow: hidden;
    height: 100dvh;
  }

  to {
    overflow: auto;
  }
}
.scale_down {
  scale: $scaleDown;
}
.scale_to_49 {
  scale: math.div(49, 304);
}
.load-container {
  position: absolute;
  height: 100%;
  width: 100%;
  background: $backgroundColor;
  // animation: opacity $totalAnimationTime linear;
  animation-fill-mode: forwards;
  z-index: 2;
  overflow: hidden;
}
.load-container .hexagon {
  top: 0%;
  left: 0%;
  transform: scale(0);
}
@keyframes opacity {
  0% {
    visibility: visible;
  }
  99% {
    visibility: visible;
  }

  100% {
    visibility: hidden;
  }
}
.hexagon {
  fill: $accentColor;
  position: absolute;
}

@for $r from 0 through $radius {
  @for $i from 0 through $r {
    $count: $count + 1;
    .load-container .hexagon:nth-child(#{$count}) {
      margin-top: ($displayHeight * $r) - $halfSvgHeight;
      margin-left: (
          (($r * $halfDisplayWidth * -1)) +
            ($i * $displayWidth) -
            $halfDisplayWidth
        ) -
        $halfSvgWidth;
    }
  }
  @for $i from 0 through $r {
    $count: $count + 1;
    .load-container .hexagon:nth-child(#{$count}) {
      margin-top: (($r * $displayHeight) - ($i * $displayHeight)) -
        $halfSvgHeight;
      margin-left: (
          ($halfDisplayWidth + ($r * $halfDisplayWidth)) +
            ($i * $halfDisplayWidth)
        ) -
        $halfSvgWidth;
    }
  }
  @for $i from 0 through $r {
    $count: $count + 1;
    .load-container .hexagon:nth-child(#{$count}) {
      margin-top: (($displayHeight * -1) - ($i * $displayHeight)) -
        $halfSvgHeight;
      margin-left: (($r * $displayWidth) - ($i * $halfDisplayWidth)) -
        $halfSvgWidth;
    }
  }
  @for $i from 0 through $r {
    $count: $count + 1;
    .load-container .hexagon:nth-child(#{$count}) {
      margin-top: (($r + 1) * $displayHeight * -1) - $halfSvgHeight;
      margin-left: (
          (($r * $halfDisplayWidth)) - ($i * $displayWidth) - $displayWidth
        ) -
        $halfSvgWidth;
    }
  }
  @for $i from 0 through $r {
    $count: $count + 1;
    .load-container .hexagon:nth-child(#{$count}) {
      margin-top: ((($r) * $displayHeight * -1) + ($i * $displayHeight)) -
        $halfSvgHeight;
      margin-left: (
          (($r + 1) * $halfDisplayWidth * -1) -
            ($i * $halfDisplayWidth) -
            $displayWidth
        ) -
        $halfSvgWidth;
    }
  }
  @for $i from 0 through $r {
    $count: $count + 1;
    @if $i != $r {
      .load-container .hexagon:nth-child(#{$count}) {
        margin-top: (
            ($displayHeight * -1) + ($i * $displayHeight) + ($displayHeight * 2)
          ) -
          $halfSvgHeight;
        margin-left: (
            ($r * $displayWidth * -1) + ($i * $halfDisplayWidth) - $displayWidth
          ) -
          $halfSvgWidth;
      }
    } @else {
      $count: $count - 1;
    }
  }
}

@for $r from 0 through $radius {
  .r#{$r} {
    animation: pulse $animation-duration #{$r * 0.25}s forwards,
      scaleUp 2s $totalAnimationTime forwards;
  }
}
@keyframes scaleUp {
  to {
    transform: scale(0);
    fill: black;
  }
  to {
    transform: scale(1);
    fill: black;
  }
}
@keyframes pulse {
  0% {
    -webkit-transform: scale(0.01);
    transform: scale(0.01);
  }

  50% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }

  100% {
    -webkit-transform: scale(0);
    transform: scale(0);
  }
}

@keyframes rotateHue {
  100% {
    -webkit-filter: hue-rotate(360deg);
    filter: hue-rotate(360deg);
  }
}
$cursorSize: 8rem;
.cursor {
  height: $cursorSize;
  width: $cursorSize;
  transform: translate(-50%, -50%);
  border-radius: 50%;
  position: absolute;
  animation: anim 2s linear infinite;
  visibility: hidden;
}
.load-container:hover .cursor {
  background: radial-gradient(
    circle,
    rgba(0, 255, 0, 1) 0%,
    rgba(0, 255, 0, 0) 70%
  );
  visibility: visible;
}
@keyframes anim {
  0% {
    filter: hue-rotate(0deg);
  }
  100% {
    filter: hue-rotate(360deg);
  }
}
